// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DBRepository is an autogenerated mock type for the DBRepository type
type DBRepository struct {
	mock.Mock
}

// CreateMigrationsTableIfNeeded provides a mock function with given fields:
func (_m *DBRepository) CreateMigrationsTableIfNeeded() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlreadyRunMigrationFilePaths provides a mock function with given fields: migrationsDirectoryAbsolutePath
func (_m *DBRepository) GetAlreadyRunMigrationFilePaths(migrationsDirectoryAbsolutePath string) ([]string, error) {
	ret := _m.Called(migrationsDirectoryAbsolutePath)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(migrationsDirectoryAbsolutePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(migrationsDirectoryAbsolutePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *DBRepository) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterRunMigration provides a mock function with given fields: migrationFileName
func (_m *DBRepository) RegisterRunMigration(migrationFileName string) error {
	ret := _m.Called(migrationFileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(migrationFileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunMigrationQuery provides a mock function with given fields: query
func (_m *DBRepository) RunMigrationQuery(query string) error {
	ret := _m.Called(query)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
